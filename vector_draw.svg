<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 27.3.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Master" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 600 600" style="enable-background:new 0 0 600 600;" xml:space="preserve" width="600"  height="600">
     <rect x="0" y="2" width="100%" height="99.5%" style="fill:#FFFFFF;stroke:#000000;stroke-width:2;stroke-miterlimit:10;"/>
     
     <g id="utility-panel" pointer-events="all">
          <g id="eye-dropper" pointer-events="all" onclick="activateEyedropper()">
               <style type="text/css">
	               .st0{fill:#FFFFFF;stroke:#000000;stroke-width:2;stroke-miterlimit:10;cursor:pointer;}
	               .st1{fill:#FFFFFF;stroke:#000000;stroke-miterlimit:10;cursor:pointer;}
	               .st2{stroke:#000000;stroke-miterlimit:10;cursor:pointer;}
                    .st3{fill:#FFFFFF;stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10;cursor:pointer;}
                    .st4{fill:#FFFFFF;cursor:pointer;}
               </style>
               <rect class="st0" x="20" y="50" width="20" height="20"/>
               <g>
                    <path class="st1" d="M31,67.6L31,67.6c-0.6,0.5-1.4,0.5-2,0l0,0c-1.1-1.1-1.8-2.7-1.8-4.3V56.4h5.6v6.9C32.8,64.9,32.1,66.5,31,67.6
                              z"/>
                    <path class="st2" d="M31,67.6L31,67.6c-0.6,0.5-1.4,0.5-2,0l0,0c-1.1-1.1-1.8-2.7-1.8-4.3V59.1l0.6,0.5c0.4,0.3,0.9,0.3,1.3,0l0,0
                              c0.5-0.3,1.1-0.3,1.6,0l0,0c0.3,0.2,0.8,0.2,1.1,0l0.9-0.5v4.2C32.8,64.9,32.1,66.5,31,67.6z"/>
                    <path class="st1" d="M32.8,54.9H27.2c0-0.2,0-0.3,0-0.5c0.3-3.2,5.2-3.2,5.5,0C32.8,54.6,32.8,54.7,32.8,54.9z"/>
               </g>
          </g>
          <g id="eraser" pointer-events="all" onclick="activateEraser()">
               <rect class="st0" x="50" y="50" width="20" height="20"/>
               <g cursor="pointer">
                    <g>
                         <path class="st4" d="M56.6,66.8c-1.3,0-2.3-0.9-2.5-2.2l-0.6-4.2c-0.1-1,0.3-2,1.2-2.5l7.4-4.3c0.4-0.2,0.8-0.3,1.2-0.3c1.3,0,2.3,0.9,2.5,2.2l0.6,4.2c0.1,1-0.3,2-1.2,2.5l-7.4,4.3C57.5,66.6,57.1,66.8,56.6,66.8z"/>
                         <path d="M63.4,53.7L63.4,53.7c0.9,0,1.8,0.6,2,1.7L66,59.7c0.1,0.8-0.3,1.6-1,2L57.6,66c-0.3,0.2-0.6,0.3-1,0.3c-0.9,0-1.8-0.6-2-1.7L54,60.3c-0.1-0.8,0.3-1.6,1-2L62.4,54C62.7,53.8,63,53.7,63.4,53.7 M63.4,52.7c-0.5,0-1,0.1-1.5,0.4L54.5,57.4C53.4,58,52.9,59.2,53,60.4l0.6,4.2c0.2,1.6,1.6,2.6,3,2.6c0.5,0,1-0.1,1.5-0.4l7.4-4.3c1.1-0.6,1.6-1.8,1.5-3l-0.6-4.2C66.1,53.8,64.8,52.7,63.4,52.7L63.4,52.7z"/>
                    </g>
                    <g>
                         <path class="st4" d="M56.6,66.8c-1.3,0-2.3-0.9-2.5-2.2l-0.6-4.2c-0.1-1,0.3-2,1.2-2.5C55.1,57.6,55.5,57.5,56,57.5c1.3,0,2.3,0.9,2.5,2.2l0.6,4.2c0.1,1-0.3,2-1.2,2.5l0,0C57.5,66.7,57,66.8,56.6,66.8z"/>
                         <path d="M56,58c0.9,0,1.8,0.6,2,1.7L58.6,64c0.1,0.8-0.3,1.6-1,2c-0.3,0.2-0.6,0.3-1,0.3c-0.9,0-1.8-0.6-2-1.7L54,60.3c-0.1-0.8,0.3-1.6,1-2C55.3,58.1,55.6,58,56,58 M56,57C55.5,57,55,57.1,54.5,57.4C53.4,58,52.9,59.2,53,60.4l0.6,4.2c0.2,1.6,1.6,2.6,3,2.6c0.5,0,1-0.1,1.5-0.4c1.1-0.6,1.6-1.8,1.5-3L58.9,61.6C58.7,60,57.4,59,56,59L56,59z M54.5,57.4L54.5,57.4C54.5,57.4,54.5,57.4,54.5,57.4C54.5,57.4,54.5,57.4,54.5,57.4L54.5,57.4z M58.1,66.9C58.1,66.9,58.1,66.9,58.1,66.9C58.1,66.9,58.1,66.9,58.1,66.9L58.1,66.9L58.1,66.9z"/>
	               </g>
                    <line class="st3" x1="60.3" y1="66.5" x2="67" y2="66.5"/>
                    <line class="st3" x1="63.3" y1="64.5" x2="67" y2="64.5"/>
               </g>

          </g>
          <g id="reset" pointer-events="all" onclick="resetCanvas()">
               <rect x="20" y="80" width="20" height="20" style="fill:#FFFFFF;stroke:#000000;stroke-width:2;stroke-miterlimit:10;cursor:pointer;"/>
               <text x="30" y="95" font-size="12" text-anchor="middle" cursor="pointer">R</text>         
          </g>
     </g>

     <g id="file-management" pointer-events="all">
          <rect x="100" y="500" width="400" height="40" style="fill:#FFFFFF;stroke:#000000;stroke-width:2;stroke-miterlimit:10;cursor:pointer;" onclick="downloadSVG()"/>
          <text x="300" y="525" font-size="16" text-anchor="middle" cursor="pointer" onclick="downloadSVG()">Download</text>
     </g>
     
     <g id="color-selection" pointer-events="all">
          <rect id="color-preview" x="525" y="50" width="50" height="25" style="fill:hsl(360,100%,100%);stroke:hsl(360,0%,0%);stroke-width:2;"/>
          
          <line x1="525" y1="130" x2="525" y2="400" stroke="#000" stroke-width="2"/>
          <circle id="hue-slider" class="slider" cx="525" cy="400" r="10" fill="#00f" stroke="#000" stroke-width="2" cursor="grab" tabindex="0"/>
          <text x="525" y="110" font-size="20" text-anchor="middle">H</text>
          <text id="hue-slider-value" x="525" y="435" font-size="16" text-anchor="middle">0</text>
          
          <line x1="550" y1="130" x2="550" y2="400" stroke="#000" stroke-width="2"/>
          <circle id="saturation-slider" class="slider" cx="550" cy="400" r="10" fill="#00f" stroke="#000" stroke-width="2" cursor="grab" tabindex="0"/>
          <text x="550" y="110" font-size="20" text-anchor="middle">S</text>
          <text id="saturation-slider-value" x="550" y="435" font-size="16" text-anchor="middle">0</text>

          <line x1="575" y1="130" x2="575" y2="400" stroke="#000" stroke-width="2"/>
          <circle id="lightness-slider" class="slider" cx="575" cy="400" r="10" fill="#00f" stroke="#000" stroke-width="2" cursor="grab" tabindex="0"/>
          <text x="575" y="110" font-size="20" text-anchor="middle">L</text>
          <text id="lightness-slider-value" x="575" y="435" font-size="16" text-anchor="middle">0</text>
     </g>

     <g id="canvas-frame" pointer-events="none">
          <g id="canvas" pointer-events="all">
               <rect id="canvas-background" x="100" y="50" width="400" height="400" style="fill:#FFFFFF;"/>
          </g>
          <rect x="100" y="50" width="400" height="400" style="fill:#FFFFFF;fill-opacity:0; stroke:#000000;stroke-width:2;stroke-miterlimit:10;"/>
     </g>
     <script>
          <![CDATA[
               const svg = document.getElementById('Master');
               const hueSlider = document.getElementById('hue-slider');
               const satSlider = document.getElementById('saturation-slider');
               const lightnessSlider = document.getElementById('lightness-slider');
               const hueSliderValue = document.getElementById('hue-slider-value');
               const satSliderValue = document.getElementById('saturation-slider-value');
               const lightnessSliderValue = document.getElementById('lightness-slider-value');
               const eyeDropper = document.getElementById('eye-dropper');
               var hueSliderValueText = hueSliderValue.textContent;
               var satSliderValueText = satSliderValue.textContent;
               var lightnessSliderValueText = lightnessSliderValue.textContent;
               var isMouseDown = false;
               var hueSliderSelected = false;
               var satSliderSelected = false;
               var lightnessSliderSelected = false;
               var isEyeDropperSelected = false;
               var yOffset = 0;
               var hue = hueSliderValueText;
               var saturation = satSliderValueText;
               var lightness = lightnessSliderValueText;
               var color = `hsl(${hue},${saturation}%,${lightness}%)`;
               
               (function() {
                    var canvas = document.getElementById("canvas");
                    var rectWidth = 8;
                    var rectHeight = 8;
                    var gridWidth = 50;
                    var gridHeight = 50;
                    var offsetX = 100;
                    var offsetY = 50;

                    for (let i = 0; i < gridWidth; i++) {
                         for (let j = 0; j < gridHeight; j++) {
                              let rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                              rect.setAttribute("id", "r" + j + "c" + i);
                              rect.setAttribute("class", "pixel");
                              rect.setAttribute("x", offsetX + i * rectWidth);
                              rect.setAttribute("y", offsetY + j * rectHeight);
                              rect.setAttribute("width", rectWidth);
                              rect.setAttribute("height", rectHeight);
                              rect.setAttribute("style", "fill:hsl(360,100%,100%);");
                              canvas.appendChild(rect);
                         }
                    }

                    var canvasGroup = document.getElementById("canvas");
                    canvasGroup.addEventListener(
                        "mouseover", 
                        (event) => {if (isMouseDown) {
                            console.log("mouseover");
                            changeColor(event);
                            }});

                    canvasGroup.addEventListener(
                         "mousedown",
                         (event) => {
                              console.log("canvas mousedown");
                              changeColor(event);
                         });

               })();

               updateHueValue({clientY: 400});
               updateSatValue({clientY: 400});
               updateLightnessValue({clientY: 400});

               document.addEventListener("mousedown", (event) => {
                     isMouseDown = true;
                     console.log("mousedown");
               });

               document.addEventListener("mouseup", (event) => {
                    isMouseDown = false;
                    console.log("mouseup");
               });

               document.addEventListener('mousemove', mousemove);

               hueSlider.addEventListener('mousedown', mousedown);
               hueSlider.addEventListener('touchstart', mousedown);
               hueSlider.addEventListener('mouseup', mouseup);
               hueSlider.addEventListener('touchend', mouseup);
               
               satSlider.addEventListener('mousedown', mousedown);
               satSlider.addEventListener('touchstart', mousedown);
               satSlider.addEventListener('mouseup', mouseup);
               satSlider.addEventListener('touchend', mouseup);
               
               lightnessSlider.addEventListener('mousedown', mousedown);
               lightnessSlider.addEventListener('touchstart', mousedown);
               lightnessSlider.addEventListener('mouseup', mouseup);
               lightnessSlider.addEventListener('touchend', mouseup);
               

               function updateHueValue(evt) {
                    let slider = document.getElementById('hue-slider');
                    let sliderValue = document.getElementById(slider.id + '-value');
                    let colorPreview = document.getElementById('color-preview');
                    const position = Math.round((400 - (evt.clientY + yOffset)) / 270 * 100);
                    const percentage = Math.min(Math.max(position, 0), 100);
                    const value = Math.round(percentage * 360 / 100);
                    const y = 400 - 270 * percentage / 100;
                    slider.setAttribute('cy', y);
                    if(sliderValue){
                         sliderValue.textContent = value;
                    }
                    hue = value;
                    color = `hsl(${hue},${saturation}%,${lightness}%)`;
                    slider.setAttribute("fill", `hsl(${hue},100%,50%)`);
                    document.getElementById("saturation-slider").setAttribute("fill", `hsl(${hue},${saturation}%,50%)`);
                    colorPreview.setAttribute("style", `fill:${color};stroke:hsl(360,0%,0%);stroke-width:2;`);
               };
               
               function updateSatValue(evt) {
                    let slider = document.getElementById('saturation-slider');
                    let sliderValue = document.getElementById(slider.id + '-value');
                    let colorPreview = document.getElementById('color-preview');
                    const position = Math.round((400 - (evt.clientY + yOffset)) / 270 * 100);
                    const value = Math.min(Math.max(position, 0), 100);
                    const y = 400 - 270 * value / 100;
                    slider.setAttribute('cy', y);
                    if(sliderValue){
                         sliderValue.textContent = value;
                    }
                    saturation = value;
                    color = `hsl(${hue},${saturation}%,${lightness}%)`;
                    slider.setAttribute("fill", `hsl(${hue},${saturation}%,50%)`);
                    colorPreview.setAttribute("style", `fill:${color};stroke:hsl(360,0%,0%);stroke-width:2;`);
               };

               function updateLightnessValue(evt) {
                    let slider = document.getElementById('lightness-slider');
                    let sliderValue = document.getElementById(slider.id + '-value');
                    let colorPreview = document.getElementById('color-preview');
                    const position = Math.round((400 - (evt.clientY + yOffset)) / 270 * 100);
                    const value = Math.min(Math.max(position, 0), 100);
                    const y = 400 - 270 * value / 100;
                    slider.setAttribute('cy', y);
                    if(sliderValue){
                         sliderValue.textContent = value;
                    }
                    lightness = value;
                    color = `hsl(${hue},${saturation}%,${lightness}%)`;
                    slider.setAttribute("fill", `hsl(${hue},0%,${lightness}%)`);
                    colorPreview.setAttribute("style", `fill:${color};stroke:hsl(360,0%,0%);stroke-width:2;`);
               };

               function mouseup(evt) {
                    console.log("mouseup slider function triggered");
                    isMouseDown = false;
                    console.log("sliderSelected = false")
                    hueSliderSelected = false;
                    satSliderSelected = false;
                    lightnessSliderSelected = false;
                    hueSlider.setAttribute('cursor', 'grab');
                    satSlider.setAttribute('cursor', 'grab');
                    lightnessSlider.setAttribute('cursor', 'grab');
                    svg.removeEventListener('touchmove', touchmove);
                    svg.removeEventListener('mouseup', mouseup);
               };

               function mousedown(evt) {
                    evt.preventDefault();
                    console.log("mousedown slider function triggered");
                    if(evt.target.id == "hue-slider"){
                         hueSliderSelected = true;} else if(evt.target.id == "saturation-slider"){
                         satSliderSelected = true;} else {
                         lightnessSliderSelected = true;}
                    console.log(`slider selected = ${evt.target.id}`);
                    let slider = evt.target;
                    yOffset = evt.clientY - slider.getAttribute('cy');
                    slider.setAttribute('cursor', 'grabbing');
                    svg.addEventListener('touchmove', touchmove);
                    svg.addEventListener('mouseup', mouseup);
               };

               function mousemove(evt) {
                    console.log("mousemove slider function triggered");
                    if (isMouseDown && (hueSliderSelected || satSliderSelected || lightnessSliderSelected)) {
                         if(hueSliderSelected){
                              updateHueValue(evt);
                         } else if(satSliderSelected){
                              updateSatValue(evt);
                         } else {
                              updateLightnessValue(evt);
                         }
                    }
               };

               function touchmove(evt) {
                    console.log("touchmove slider function triggered");
                    if (isMouseDown && (hueSliderSelected || satSliderSelected || lightnessSliderSelected)) {
                         if(hueSliderSelected){
                              const touch = evt.touches[0];
                              updateHueValue(evt);
                         } else if(satSliderSelected){
                              const touch = evt.touches[0];
                              updateSatValue(evt);
                         } else {
                              const touch = evt.touches[0];
                              updateLightnessValue(evt);
                         }
                    }
                    
               };

               function changeColor(event){
                    console.log("changeColor triggered");
                    var id = event.target.id;
                    console.log(id);
                    event.target.setAttribute("style", `fill:${color};`);
                    console.log(color);
               };

               function activateEyedropper(evt){
                    console.log("Eye dropper activated");
                    isEyeDropperSelected = true;
                    svg.setAttribute("cursor", "crosshair");
                    sampleHSLColorValue();
               };

               function activateEraser(evt){
                    console.log("Eraser activated");
                    updateHueValue({clientY: 131});
                    updateSatValue({clientY: 131});
                    updateLightnessValue({clientY: 131});
               };

               function resetCanvas(){
                    console.log("resetCanvas triggered");
                    let gridWidth = 50;
                    let gridHeight = 50;
                    for(let i = 0; i < gridWidth; i++){
                         for(let j = 0; j < gridHeight; j++){
                              let id = "r" + i + "c" + j;
                              let pixel = document.getElementById(id);
                              pixel.setAttribute("style", `fill:hsl(360,0%,100%);`);
                         }
                    }
               };

               function downloadSVG() {
                    alert("When the save dialog appears, you must manually add the .svg extension to the file name.");
                    console.log("downloadSVG triggered");
                    let canvas = document.getElementById("canvas").outerHTML;
                    let translatedImgData = canvas.replace('id="canvas"', 'id="newcanvas" transform="translate(-100, -50)"');
                    var newSvgData = '<svg version="1.1" id="Master" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" \n viewBox="0 0 400 400" style="enable-background:new 0 0 400 400;" xml:space="preserve" width="400"  height="400">' + translatedImgData + '</svg>';
                    var base64data = window.btoa(newSvgData);
                    var svgBase64Url = "data:application/octet-stream;base64," + base64data;
                    var svg = document.getElementById("Master");

                    var downloadLink = document.createElementNS('http://www.w3.org/2000/svg', 'a');
                    downloadLink.setAttribute('id', 'downloader');
                    downloadLink.setAttribute('href', svgBase64Url);
                    downloadLink.setAttribute('download','myVectorArt.svg');
                    downloadLink.setAttribute('type', 'image/svg+xml');
                    downloadLink.setAttribute('pointer-events', 'all');
                    svg.appendChild(downloadLink);
                    var downloader = document.getElementById('downloader');
                    var event = new MouseEvent('click');
                    downloader.dispatchEvent(event);
               };

               function sampleHSLColorValue(){
                    console.log("eyedropper triggered");
               };

               function cursorGrabbing(evt){
                    console.log("cursorGrabbing triggered");
                    let slider = evt.target;
                    slider.setAttribute("cursor", "grabbing;");
               };     

               function cursorRelease(evt){
                    console.log("cursorRelease triggered");
                    let slider = evt.target;
                    slider.setAttribute("cursor", "grab;");
               };
               ]]>
          </script>
     </svg>
